library(ggplot2)
install.packages("ggplot2")
getwd()
source("ksmooth3.R")
dyn.load("kernel_smooth.so")
x <- 1:10
xpts <- 300:240
h <- 0.314
ksmooth3(x, xpts,h)
help(runif)
runif(100, 0,1)
help(rbeta)
x <- runif(10000,0,1)
y <- rbeta(10000, 3, 6, ncp=0)
x <- x+2*y
plot(x)
plot(y)
x <- rnorm(1000, 45, 3)
plot(x)
help(rpoisson)
help(rpois)
y <- rpois(10000, 5)
x <- x+(.2*y)
plot(x)
xpts <- 1:10
h <- 1
kmooth3(x,xpts,h)
ksmooth3(x,xpts,h)
summary(x)
qqplot(x)
x
qplot(x)
qqnorm(x)
rpois(5,5)
rpois(5,10)
rpois(10,10)
runif(10, 0,12)
x <- rpois(10,10 + 2*runif(10,0,12)
)
x
plot(x)
qqnorm(x)
help(qqnorm)
y <- rchisq(500, df = 3)
qqplot(qchisq(ppoints(500), df = 3), y,
main = expression("Q-Q plot for" ~~ {chi^2}[nu == 3]))
qqline(y, distribution = function(p) qchisq(p, df = 3),
prob = c(0.1, 0.6), col = 2)
y <- rt(200, df = 5)
qqnorm(y); qqline(y, col = 2)
qqplot(y, rt(300, df = 5))
qqline(y, col=2)
x <- rpois(10,10) + 2*runif(10, 1.20)
x <- rpois(10,10) + 2*runif(10, 1,20)
x
qqnorm(x)
qqline(x,col=2)
library("dplyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("data.table", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
install.packages(c("codetools", "lattice"))
source("ksmooth3.R")
dyn.load("kernel_smooth.so")
install.packages("Rcpp")
install.packages("knitr")
ls()
dyn.load("X.so")
is.loaded("func")
.C("func", as.integer(3))
dyn.unload("X.so")
dyn.load("X.so")
is.load("func")
is.loaded("func")
.C("func", as.integer(10))
install.packages("Rmpi")
set.seed(955)
xvar <- 1:20 + rnorm(20, sd=3)
zvar <- 1:20/4 + rnorm(20, sd=2)
yvar <- -2*xavr + xvar*zvar/5+3+rnorm(20,sd=4)
yvar <- -2*xvar + xvar*zvar/5+3+rnorm(20,sd=4)
dat <- data.frame(x=xvar, y=yvar, z=zvar)
dat
head(dat)
str(dat)
cor(dat$x, dat$y)
cor(dat)
round(cor(dat),2)
ctab <- cor(dat)
plotcorr(ctab, mar = c(0.1, 0.1, 0.1, 0.1))
library(ggplot2)
plotcorr(ctab, mar = c(0.1, 0.1, 0.1, 0.1))
plot(ctab)
plot(dat$x, dat$y, dat$z)
pairs(dat)
con <- url("http://scholar.google.com/citations?user=HI0I6C0AAAAJ&hl=en")
htmlCode <- readLines(con)
htmlcode
con <- url("http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en")
htmlCode <- readLines(con)
htmlCode <- readLines(con)
htmlcode
con <- url("http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en")
help(url)
close(con
)
htmlcode
library(XML)
url <- "http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en"
html <- htmlTreeParse(url, useInternalNodes=T)
xpathSApply(html, "//title", xmlValue)
install.pacakges(httr)
install.packages(httr)
library(httr)
html <- GET(url)
content2 <- content(html2, as="text")
htmls <- GET(url)
html2 <- GET(url)
content2 <- content(html2, as="text")
parsedHTML <- htmlParse(content2, asText=TRUE)
xpathSApply(parsedHTML, "//title", xmlValue)
pg1 = GET("http://httpbin.org/basic-auth/user/passwd")
pg1
pg1 = GET("http://httpbin.org/basic-auth/user/passwd", authenticate("user","passwd")))
pg1 = GET("http://httpbin.org/basic-auth/user/passwd")
pg1
pg1 = GET("http://httpbin.org/basic-auth/user/passwd", authenticate("user","passwd"))
pg1
names(pg1)
google <- handle("http://google.com")
pg1 <-GET(handle=google, path="/")
install.packages("httr")
install.packages("httr")
myapp <- oauth_app("twitter", key-"yourConsumerKeyHere", secret="yourConsumerSecretHere")
myapp <- oauth_app("git",key="fee83d506c0a0f12c605", secret="8ec94a777e1f29419e504ee774102e4581908e6f")
myapp <- oauth_app("APItest",key="fee83d506c0a0f12c605", secret="8ec94a777e1f29419e504ee774102e4581908e6f")
library(httr)
myapp <- oauth_app("APItest",key="fee83d506c0a0f12c605", secret="8ec94a777e1f29419e504ee774102e4581908e6f")
myapp
library(httr, httpuv)
library("httpuv", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
oauth_endpoints("github")
myapp <- oauth_app("github", key="f856081a686f175c6fa7", secret="f856081a686f175c6fa7")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
lirbrary("httr", "httpuv")
library("httr", "httpuv")
github_token
library(httr); library(httpuv)
oauth_endpoints("github")
myapp <- oauth_app("github", key="f856081a686f175c6fa7",secret="d7b049101b04a99cd38d7076d1a772c24af7c267")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token=github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
json1 <- content(req)
d.t <- json2(pushed.at)
names(json1)
req
github_token
json1 <- content(req)
json1
names(json1)
library(httr); library(httpuv)
oauth_endpoints("github")
myapp <- oauth_app("github", key="f856081a686f175c6fa7",secret="d7b049101b04a99cd38d7076d1a772c24af7c267")
myapp
gtoken <- config(token=github_token)
gotken
gtoken
myappgithub_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
json1 <- content(req)
json1
str(json1)
headers(json1)
library(httr); library(httpuv)
oauth_endpoints("github")
myapp <- oauth_app("github", key="f856081a686f175c6fa7",secret="d7b049101b04a99cd38d7076d1a772c24af7c267")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token=github_token)
gtoken
github_token
json2 <- jsonlite::fromJSON(toJSON(json1))
library(jsonlite)
json2 <- jsonlite::fromJSON(toJSON(json1))
json1 <- content(req)
gtoken <- config(token=github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
json1 <- content(req)
json2 <- jsonlite::fromJSON(toJSON(json1))
json2
head(json2)
class(json2)
json2
names(json2)
json2$id
json2$names
names(json2)
json2$name
str(rnorm)
help(str)
class(rnorm)
atributes(rnorm)
attributes(rnorm)
json1[4]
json2 <- jsonlite::fromJSON(toJSON(json1))
names(json2)
json2$names
json2$name
json2$created_at
json2$create_at[json2$name="datasharing"]
json2$created_at[json2$name="datasharing"]
json2$created_at[json2$name=="datasharing"]
url="http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for "
x <- read.fwf(file=url(url),skip=4, widthis(c(12,7,4,9,4,9,4,9,4))
)
x <- read.fwf(file=url(url),skip=4, widths=c(12,7,4,9,4,9,4,9,4))
x
head(x)
sum(x[,4])
file.url <- 'https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for'
file.dest <- 'getdata.for'
# download from the URL
download.file(file.url, file.dest)
# load the data
getdata <- read.fwf('getdata.for', skip=4, widths=c(12, 7,4, 9,4, 9,4, 9,4))
# inspect data
head(getdata)
# calculate sum for column 4
sum(getdata$V4)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
desk <- getdata.for
library(sqldf)
install.packages("sqldf")
library(sqldf)
getwd()
setwd("/dropbox/coursera/3-Gettingcleaningdata")
acs <- read.csv("./getdata-data-ss06pid.csv", header=T, sep=",")
getwd()
setwd("/Users/jasonab/Dropbox/Coursera/2-R/PA2/ProgrammingAssignment2")
ls()
install.packages("lubridate")
seconds_to_period(45)
library(lubrdate)
library(lubridate)
seconds_to_period(45)
(45/60)
(57/60)+(45/60)+(44/60)+((60+15)/60)+((60+48)/60)+(57/60)+((60+30)/60)
.933*60
.933/60
.933*60
getwd()
setwd("/users/jasonab/dropbox/coursera/2-r/programmingassignment2")
ls
ls()
source("makeCacheMatrix")
ls
getwd()
source('~/Dropbox/Coursera/2-R/ProgrammingAssignment2/cachematrix.R')
## Put comments here that give an overall description of what your
## functions do
## Thus function creates a matrix object that is used to store a cached
## version of its inverse
makeCacheMatrix <- function(x = matrix()) {
I <- NULL
set <- function(y) {
x <<- y
I <<- NULL
}
get <- function() x
setinv <- function(solve) I <<- solve
getinv <- function() I
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
}
source('~/Dropbox/Coursera/2-R/ProgrammingAssignment2/cachematrix.R')
help(mstrix)
help(matrix)
a <- 1:6
a
A <- matirx(a, 2,3)
A <- matrix(a, 2,3)
A
makeCachmatrix()
source('~/Dropbox/Coursera/2-R/ProgrammingAssignment2/cachematrix.R')
makeCacheMatrix()
makeCacheMatrix(A)
X <- makeCacheMatrix(A)
X
class(X)
source('~/Dropbox/Coursera/2-R/ProgrammingAssignment2/makeVector.R')
a <- vector(c(1:5))
help(vector)
a <- as.vector(c(1:10))
a
makeVector()
makeVector(a)
A
a <- cachmatrix()
a <- makeCachMatrix()
source('~/Dropbox/Coursera/2-R/ProgrammingAssignment2/cachematrix.R')
a <- makeCacheMatrix()
a
a$set(matrix(c(1:6), 2,3))
a$set
a <- makeCacheMatrix()
summary(a)
A
X <- makeCacheMatrix(A)
summary(X)
a$getMatrix
X$getMatrix
X$getinv
X
source('~/Dropbox/Coursera/2-R/ProgrammingAssignment2/cachematrix.R')
source('~/Dropbox/Coursera/2-R/ProgrammingAssignment2/cachematrix.R')
X
X$get
X$getmatrix
a
summary(X)
X$get
X
source('~/Dropbox/Coursera/2-R/ProgrammingAssignment2/cachematrix.R')
source('~/Dropbox/Coursera/2-R/ProgrammingAssignment2/cachematrix.R')
source('~/Dropbox/Coursera/2-R/ProgrammingAssignment2/cachematrix.R')
M ,_makeCacheMatrix(c(3,5, -1,2), 2,2)
A <- Matrix(c(3,5,-1,2),2,2)
A <- matrix(c(3,5,-1,2),2,2)
A
solve(A)
source('~/Dropbox/Coursera/2-R/ProgrammingAssignment2/cachematrix.R')
macCachedMatrix(X)
X <- makeCachedMatrix(A)
source('~/Dropbox/Coursera/2-R/ProgrammingAssignment2/cachematrix.R')
X <- makeCachedMatrix(A)
X <- makeCacheMatrix(A)
summary(X)
X$get()
X$getinv()
X$setinv(I)
I
source('cacheSolve.R')
source('cacheSolve')
source('cachematrix.R')
X <- makeCacheMatrix(c(1,5,-1,6),2,2)
X <- makeCacheMatrix(c(1,5,-1,6),2,2))
X <- makeCacheMatrix(matrix(c(1,5,-1,6),2,2))
X
X$get
X$get()
cacheSolve(X)
source('~/Dropbox/Coursera/2-R/ProgrammingAssignment2/cachematrix.R')
cacheSolve(X)
solve(X)
A
source('~/Dropbox/Coursera/2-R/ProgrammingAssignment2/cachematrix.R')
source('~/Dropbox/Coursera/2-R/ProgrammingAssignment2/cachematrix.R')
runif(4)
A <- matrix(runif(4), 2,2)
A
solve(A)
X <- makeCachematrix(A)
source("makeCacheMatrix')
"
)
source("makeCacheMatrix")
source("cachematrix.R")
ls()
A
X <- makeCacheMatrix(A)
X$get
X$get()
A
cacheSolve(A)
x$getinv()
I
source('~/Dropbox/Coursera/2-R/ProgrammingAssignment2/cachematrix.R')
rm(list=ls())
ls()
source('~/Dropbox/Coursera/2-R/ProgrammingAssignment2/cachematrix.R')
getwd()
ls()
A <- matrix(runif(9),3,3)
A
X <- makeCaheMatrix(A)
X <- makeCacheMatrix(A)
X$get()
x$get()
names(S)
names(X)
X$getinv
X$get
cacheSolve(X)
A
A==X
I
X$getinv()
A
solve(A)
source('~/Dropbox/Coursera/2-R/ProgrammingAssignment2/cachematrix.R')
source('~/Dropbox/Coursera/2-R/ProgrammingAssignment2/cachematrix.R')
ls()
A
rm(X)
ls()
set.seed(123)
A <- matrix(rnorm(16, 0,1), 4,4)
A
A.i <- solve(A)
A.i
X <- makeCacheMatrix(A)
X$get()
cacheSolve(X)
names(X)
X$getinv()
source('~/Dropbox/Coursera/2-R/ProgrammingAssignment2/cachematrix.R')
X <- makeCacheMatrix(A)
cacheSolve(X)
source('~/Dropbox/Coursera/2-R/ProgrammingAssignment2/cachematrix.R')
source('~/Dropbox/Coursera/2-R/ProgrammingAssignment2/cachematrix.R')
X <- makeCacheMatrix()
X$get()
cacheSolve(X)
x <- list(a=1:5, b=rnorm(10))
lapply(x, mean)
x.app <- lapply(x, var)
x.app
x <- list(a=1:4, b = rnorm(10, c=rnorm(20,1), d=rnorm(100,5))
)
x <- 1:4
lapply(x, runif)
help(runif)
x <- 1:4
lapply(x, runif, min=0, min=10)
lapply(x, runif, min=0, min=10)
x <- 1:4
lapply(x, runif, min=0, max=10)
x <- list(a = matrix(1:4, 2,2), b=matrix(1:6,3,2))
x
lapply(x, function(elt), elt[,1]])
lapply(x, function(elt), elt[,1])
x
lapply(x, function(elt) elt[,1])
lapply(x, function(elt) elt[2,1])
lapply(x, function(elt) elt[2,2])
lapply(x, function(elt) elt[2,3])
lapply(x, function(elt) elt[2,2])
lapply(x, function(elt) elt[2,])
x <- list(a=1:4, b=rnorm(10), c=rnorm(20,1), d=rnorm(100,5))
lapply(x,mean)
sapply(x,mean)
mean(x)
rm(list=ls())
str(apply)
x <- matrix(rnorm(200),20,10)
apply(x,2,mean)
x
apply(x,2,mean)
apply(x,1,mean)
x[,1]
mean(x[,1])
colmean <- apply(x,2,mean)
rowsum <- apply(2,1,sum)
rowsum <- apply(x,1,sum)
rowsum
rowSums(x)
colMeans(x)
str(colMeans)
x <- matrix(rnorm(200),20,10)
apply(x,1,quantile, probs=c(0.25,75))
apply(x,1,quantile, probs=c(0.25,0.75))
quantile(x[1,], probs=c(0.25,0.75))
a <- arry(rnorm(2*2*10), c(2,2,10))
a <- array(rnorm(2*2*10), c(2,2,10))
a
apply(a,c(1,2),mean)
a
rowMeans(a, dims=2)
str(mapply)
list(rep(1,4), rep(2,3), rep(3,2), rep(4,1))
mapply(rep, 1:4, 4:1)
noise <- function(n,mean, ds){
rnorm(n, mean, sd)
}
noise(5,1,2)
source('noise')
noise <- function(n, mean, sd){
rnorm(n, mean,sd)}
noise(5,1,2
)
mapply(noise, 1:5, 1:5, 2)
list(noise(1,1,2), noise(2,2,2), noise(3,3,2), noise(4,4,2), noise(5,5,2))
str(tapply)
x <- c(rnorm(10), runif(10), rnorm(10,1))
f <- g1(3,10)
f <- gl(3,10)
f
tapply(x, f, mean)
tapply(x, f, mean, simplify=FALSE)
tapply(x, f, range)
tapply(x, f, range, simplify=TRUE)
help(mapply)
